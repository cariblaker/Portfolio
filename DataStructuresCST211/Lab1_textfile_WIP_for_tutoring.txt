//custom array class code by Cari Blaker for Lab1 CST 211
//this is the Array.h file

#ifndef ARRAYTEMPLATE_H
#define ARRAYTEMPLATE_H

#include <iostream>
#include <string>
#include "Exception.h"

using std::cout;
using std::cin;
using std::endl;
using std::string;

template <typename T>
class Array {
private:
	T* m_array;
	int m_start_index;
	int m_length;
	int m_newArray;

public:
	Array() : m_array(nullptr), m_start_index(0), m_length(0) {};	//default constructor
	Array(int length, int start_index = 0);							//constructor
	Array(const Array<T>& copy);									//copy constructor
	Array(Array<T>&& move) noexcept;								//move constructor

	~Array();														//destructor

	Array<T>& operator = (const Array<T>& copy);					//overloaded copy assignment operator 
	Array<T>& operator = (Array<T>&& move) noexcept;				//overloaded move assignment operator
	T& operator [] (const int);										//overloaded subscript operator

	const int getStartIndex();						//gets start index
	void setStartIndex(const int start_index);		//sets start index
	const int getLength();							//gets length of array
	void setLength(int length);						//sets length of array
};

template<typename T>								
Array<T>::Array(int length, int start_index) : m_start_index(0), m_length(0) 		//paramaterized constructor
{
	m_length = length;
	m_start_index = start_index;
	m_array = new T*[m_length];
	for (int i = m_start_index; i < (m_length + m_start_index); i++)		//fill array with null values
		m_array[i] = NULL;

}

template<typename T>
Array<T>::Array(const Array<T>& copy)										//copy constructor
{
	m_length = copy.m_length;
	m_start_index = copy.m_start_index;
	m_newArray = copy.m_newArray;
	for (int i = m_start_index; i < (m_length + m_start_index); i++)		//copy entire array
	{
		m_array[i] = copy.m_array[i];
	}
}

template<typename T>														//move constructor
Array<T>::Array(Array<T>&& move) noexcept
{
	*this = move;
}

template<typename T>
Array<T>::~Array()															//deconstructor
{
	delete[] m_array;
}

template<typename T>
Array<T>& Array<T>::operator = (const Array<T>& copy)						//copy assignment operator
{
	if (copy != this)																	//avoid self-assignment
	{
		if (m_length != copy.m_length)
		{
			delete[] m_array;
			m_length = copy.m_length;
			T *m_array = new T[m_length];			
		}

		for (int i = m_start_index; i < (m_length + m_start_index); i++)
			m_array[i] = copy.m_array[i];
	}

	return *this;
}

template<typename T>
Array<T>& Array<T>::operator = (Array<T>&& move) noexcept					//move assignment operator
{
	return move;
}

template<typename T>
T& Array<T>::operator [] (const int index)
{
	if ( (index > (m_length + m_start_index) ) || (index < m_start_index) )
		throw Exception("Index out of range");								//throw exception for out of bounds

	return m_array[index];													//returns copy of info at index
}

template<typename T>
const int Array<T>::getStartIndex()											//m_start_index getter
{
	return m_start_index;
}

template<typename T>
void Array<T>::setStartIndex(const int start_index)							//m_start_index setter
{
	T* temp = new T[m_length];											//create a temp to hold the new array
	for (int i = start_index; i < (start_index + m_length); i++)			//length doesn't change
	{
		if (start_index < m_start_index || start_index > m_start_index)		//if the current index is out of previous bounds,					
			temp[i] = NULL;													//fill with NULL
		else
			temp[i] = m_array[i];											//otherwise, copy old array
	}																		
	m_array = temp;															//reset m_array to have proper values & positions
	delete[] temp;															//free up temp array memory
}

template<typename T>
const int Array<T>::getLength()												//m_length getter
{
	return m_length;
}

template<typename T>
void Array<T>::setLength(int length)										//m_length setter
{
	if (length > 0)
		m_length = length;
	else
		throw Exception("Length must be > 0");								//throw exception for length <= 0

}

#endif //ARRAY_TEMPLATE_H










//here's the Exception.h file
//Exception class by Cari Blaker for Lab1 CST211


#ifndef EXCEPTION_H
#define EXCEPTION_H

#include <string>
#include <iostream>
#include <exception>

using std::string;
using std::exception;
using std::ostream;

class Exception : public exception {

	string m_msg;

public:
	Exception() noexcept : m_msg("Unknown Error") {};						//default constructor
	Exception(const string& msg) : m_msg(msg) {};							//constructor with parameters
	Exception(const Exception& move) noexcept : m_msg(move.m_msg) {};		//copy constructor
	Exception(Exception&& copy) noexcept;									//move constructor


	Exception& operator = (const Exception& move) noexcept;					//copy assignment operator
	Exception& operator = (Exception&& copy) noexcept;						//move assignment operator

	const string getMessage() { return m_msg; }								//gets exception message
	void setMessage(const string& message) { m_msg = message; }				//sets exception message

	friend std::ostream& operator << (std::ostream&, const Exception&);		//overloaded output operator 
};

Exception::Exception(Exception&& copy) noexcept								//copy constructor
{
	m_msg = copy.m_msg;
}

Exception& Exception::operator = (const Exception& move) noexcept			//copy assignment operator
{
	m_msg = move.m_msg;
	return *this;
}

Exception& Exception::operator = (Exception&& copy) noexcept
{
	return copy;
}

ostream& operator << (ostream& out, const Exception& except)
{
	out << except.m_msg;
	return out;
}

#endif //EXCEPTION_H

















//this is the testing .cpp file provided by the instructor. Can't be modified.
//ideally, this would all be uncommented and run with all tests passed
//but that's not what's happening right now, lol
//I've been running one test at a time, as recommended...
//but then I fail one, mess with the code, and start failing previous ones
//that I already passed, and then I start over againnnn

#define _CRTDBG_MAP_ALLOC

typedef bool(*FunctionPointer)();  // Define a funtion pointer type

#include <string>
using std::string;

#include <iostream>
using std::cout;
using std::cin;
using std::endl;

#include <crtdbg.h>
#include <conio.h>
#include "Array.h"
#include "Exception.h"

// Strings to test
const char* NAMES[] = { "Kyle", "Brit", "Seth", "Alex", "Josh", "Kian",
"Kate", "Terry", "Ann", "Elaine", "Stephanie", "Wanda", "Oscar",
"Oliver", "Tobey" };

const int NUM_NAMES = 15;

Array<int> create_int_Array();
Array<string> create_string_Array();

// Test function declaration
bool test_neg_length();
bool test_lower_bounds();
bool test_upper_bounds();
bool test_2_arg_ctor();
bool test_1_arg_ctor();
bool test_default_ctor();
bool test_set_pos_start_index();
bool test_set_neg_start_index();
bool test_adding_values();
bool test_larger_length_with_data();
bool test_smaller_length_with_data();
bool test_set_start_index_with_data();
bool test_copy_ctor();
bool test_move_ctor();
bool test_op_eql();
bool test_neg_length_complex();
bool test_lower_bounds_complex();
bool test_upper_bounds_complex();
bool test_2_arg_ctor_complex();
bool test_1_arg_ctor_complex();
bool test_default_ctor_complex();
bool test_set_pos_start_index_complex();
bool test_set_neg_start_index_complex();
bool test_adding_values_complex();
bool test_larger_length_with_data_complex();
bool test_smaller_length_with_data_complex();
bool test_set_start_index_with_data_complex();
bool test_copy_ctor_complex();
bool test_move_ctor_complex();
bool test_op_eql_complex();

// Array of test functions
FunctionPointer test_functions[] = { test_neg_length, test_lower_bounds, test_upper_bounds,
									test_2_arg_ctor, test_1_arg_ctor, test_default_ctor,
									test_set_pos_start_index, test_set_neg_start_index,
									test_adding_values/*, test_larger_length_with_data,
									test_smaller_length_with_data, test_set_start_index_with_data,
									test_copy_ctor, test_move_ctor, test_op_eql, test_neg_length_complex,
									test_lower_bounds_complex, test_upper_bounds_complex,
									test_2_arg_ctor_complex, test_1_arg_ctor_complex, test_default_ctor_complex,
									test_set_pos_start_index_complex, test_set_neg_start_index_complex,
									test_adding_values_complex, test_larger_length_with_data_complex,
									test_smaller_length_with_data_complex, test_set_start_index_with_data_complex,
									test_copy_ctor_complex, test_move_ctor_complex, test_op_eql_complex*/ };

int main()
{
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);

	int failed_tests = 0;

	// Run the test functions
	for (FunctionPointer func : test_functions)
	{
		if (func())
		{
			cout << "passed" << endl;
		}
		else
		{
			failed_tests++;
			cout << "***** failed *****" << endl;
		}
	}

	if (failed_tests > 0)
		cout << endl << "You have " << failed_tests << " failed tests";
	else
		cout << endl << "All tests passed! Good job!";

	cout << endl;
	system("pause");
	cout << "Exiting..." << endl;

	return 0;
}
//int main()
//{
//	// Run the test functions
//	for (FunctionPointer func : test_functions)
//	{
//		if (func())
//		{
//			cout << "passed" << endl;
//		}
//		else
//		{
//			cout << "***** failed *****" << endl;
//		}
//	}
//
//	cout << "\nPress Any Key to Exit";
//	cin.get();
//}

bool test_neg_length()
{
	// Exception should be thrown for negative number
	bool pass = false;

	Array<int> val_len(20, 0);

	try // setting a negative length
	{
		val_len.setLength(-5);
	}
	catch (Exception& exception)
	{
		pass = true;
	}

	cout << "Negative length test ";

	return pass;
}

bool test_lower_bounds()
{
	bool pass = false;

	Array<int> val_len(20, 0);

	try // an invalid range - too low
	{
		val_len[-3] = 0;
	}
	catch (Exception& exception)
	{
		pass = true;
	}

	cout << "Lower bounds test ";

	return pass;
}

bool test_upper_bounds()
{
	bool pass = false;

	Array<int> val_len(20, 0);

	try // an invalid range - too high
	{
		val_len[30] = 0;
	}
	catch (Exception& exception)
	{
		pass = true;
	}

	cout << "Upper bounds test ";

	return pass;
}

// Test the parameter constructor
bool test_2_arg_ctor()
{
	bool pass = true;
	int length = 15;
	int start_index = 3;

	Array<int> val_len(length, start_index);

	if (val_len.getLength() != length)
		pass = false;

	if (val_len.getStartIndex() != start_index)
		pass = false;

	cout << "2 arg ctor test ";

	return pass;
}

// Test just 1 argument
bool test_1_arg_ctor()
{
	bool pass = true;
	int length = 15;
	int default_start_index = 0;

	Array<int> val_len(length);

	if (val_len.getLength() != length)
		pass = false;

	if (val_len.getStartIndex() != default_start_index)
		pass = false;

	cout << "1 arg ctor test ";

	return pass;
}

// Test the default constructor (start 0, length 0)
bool test_default_ctor()
{
	bool pass = true;
	int default_length = 0;
	int default_start_index = 0;

	Array<int> val_len;

	if (val_len.getLength() != default_length)
		pass = false;

	if (val_len.getStartIndex() != default_start_index)
		pass = false;

	cout << "Default ctor test ";

	return pass;
}

// Start with index as 5
bool test_set_pos_start_index()
{
	bool pass = true;
	int start_index = 6;

	Array<int> val_len(10, 5);

	val_len.setStartIndex(start_index);

	if (val_len.getStartIndex() != start_index)
		pass = false;

	cout << "Pos start index test ";

	return pass;
}

// Start with index as -6
bool test_set_neg_start_index()
{
	bool pass = true;
	int start_index = -6;

	Array<int> val_len(10, 5);

	val_len.setStartIndex(start_index);

	if (val_len.getStartIndex() != start_index)
		pass = false;

	cout << "Neg start index test ";

	return pass;
}

bool test_adding_values()
{
	bool pass = true;
	int temp;

	int num_elements = 10;  // Change this if test data changes
	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

	Array<int> val_len(10); // Create the array

	for (int i = 0; i < num_elements; ++i) // Fill it with data
		val_len[i] = test_data[i];

	for (int i = 0; i < num_elements && pass; ++i)
	{
		temp = val_len[i];

		if (temp != test_data[i])
			pass = false;
	}

	cout << "Add values test ";

	return pass;
}

//bool test_larger_length_with_data()
//{
//	bool pass = true;
//	int temp;
//
//	int new_length = 20;
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	val_len.setLength(new_length);  // Double the length after data was assigned
//
//	// First 10 should match
//	for (int i = 0; i < num_elements && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp != test_data[i])
//			pass = false;
//	}
//
//	// Last 10 should be garbage (negative number) or 0
//	for (int i = 10; i < new_length && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp > 0)
//			pass = false;
//	}
//
//	cout << "Change larger length with data test ";
//
//	return pass;
//}
//
//bool test_smaller_length_with_data()
//{
//	bool pass = true;
//	int temp;
//	int new_length = 8;
//
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	val_len.setLength(new_length);
//
//	// First 8 should match
//	for (int i = 0; i < new_length && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp != test_data[i])
//			pass = false;
//	}
//
//	cout << "Change smaller length with data test ";
//
//	return pass;
//}
//
//bool test_set_start_index_with_data()
//{
//	bool pass = true;
//	int temp;
//	int new_start_index = 8;
//
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	val_len.setStartIndex(new_start_index);
//
//	// Check data integrity
//	for (int i = 0; i < num_elements && pass; ++i)
//	{
//		try // to access data out of range
//		{
//			temp = val_len[i + new_start_index];
//			if (temp != test_data[i])
//				pass = false;
//		}
//		catch (Exception& exception)
//		{
//			pass = true;
//		}
//	}
//
//	cout << "Set start index with data test ";
//
//	return pass;
//}
//
//bool test_copy_ctor()
//{
//	bool pass = true;
//
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	Array<int> val_len_cpy(val_len);
//
//	// Check data integrity
//	for (int i = 0; i < num_elements && pass; ++i)
//	{
//		if (val_len_cpy[i] != test_data[i])
//			pass = false;
//	}
//
//	cout << "Copy ctor test ";
//
//	return pass;
//}
//
//Array<int> create_int_Array()
//{
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	return val_len; // Return the filled array
//}
//
//bool test_move_ctor()
//{
//	bool pass = true;
//
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	Array<int> val_len_cpy(create_int_Array());
//
//	// Check data integrity
//	for (int i = 0; i < num_elements && pass; ++i)
//	{
//		if (val_len_cpy[i] != test_data[i])
//			pass = false;
//	}
//
//	cout << "Move ctor test ";
//
//	return pass;
//}
//
//bool test_op_eql()
//{
//	bool pass = true;
//
//	int num_elements = 10;  // Change this if test data changes
//	int test_data[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//
//	Array<int> val_len(10); // Create the array
//
//	for (int i = 0; i < num_elements; ++i) // Fill it with data
//		val_len[i] = test_data[i];
//
//	Array<int> val_len_cpy;
//
//	val_len_cpy = val_len;
//
//	// Check data integrity
//	for (int i = 0; i < num_elements && pass; ++i)
//	{
//		if (val_len_cpy[i] != test_data[i])
//			pass = false;
//	}
//
//	cout << "Op equal test ";
//
//	return pass;
//}
//
//////////////////////////////////////////////
//// Complex data type tests
//////////////////////////////////////////////
//
//bool test_neg_length_complex()
//{
//	// Exception should be thrown for negative number
//	bool pass = false;
//
//	Array<string> val_len(20, 0);
//
//	try // setting a negative length
//	{
//		val_len.setLength(-5);
//	}
//	catch (Exception& exception)
//	{
//		pass = true;
//	}
//
//	cout << "Negative length test complex ";
//
//	return pass;
//}
//
//bool test_lower_bounds_complex()
//{
//	bool pass = false;
//
//	Array<string> val_len(20, 0);
//
//	try // storing a value at a negative location
//	{
//		val_len[-3] = "test";
//	}
//	catch (Exception& exception)
//	{
//		pass = true;
//	}
//
//	cout << "Lower bounds test complex ";
//
//	return pass;
//}
//
//bool test_upper_bounds_complex()
//{
//	bool pass = false;
//
//	Array<string> val_len(20, 0);
//
//	try // place a value at a too large location
//	{
//		val_len[30] = "test";
//	}
//	catch (Exception& exception)
//	{
//		pass = true;
//	}
//
//	cout << "Upper bounds test complex ";
//
//	return pass;
//}
//
//// Test 2 arguments
//bool test_2_arg_ctor_complex()
//{
//	bool pass = true;
//	int length = 15;
//	int start_index = 3;
//
//	Array<string> val_len(length, start_index);
//
//	if (val_len.getLength() != length)
//		pass = false;
//
//	if (val_len.getStartIndex() != start_index)
//		pass = false;
//
//	cout << "2 arg ctor test complex ";
//
//	return pass;
//}
//
//// Test just 1 argument
//bool test_1_arg_ctor_complex()
//{
//	bool pass = true;
//	int length = 15;
//	int default_start_index = 0;
//
//	Array<string> val_len(length);
//
//	if (val_len.getLength() != length)
//		pass = false;
//
//	if (val_len.getStartIndex() != default_start_index)
//		pass = false;
//
//	cout << "1 arg ctor test complex ";
//
//	return pass;
//}
//
//// Test the default constructor
//bool test_default_ctor_complex()
//{
//	bool pass = true;
//	int default_length = 0;
//	int default_start_index = 0;
//
//	Array<string> val_len;
//
//	if (val_len.getLength() != default_length)
//		pass = false;
//
//	if (val_len.getStartIndex() != default_start_index)
//		pass = false;
//
//	cout << "Default ctor test complex ";
//
//	return pass;
//}
//
//// Start with index as 6
//bool test_set_pos_start_index_complex()
//{
//	bool pass = true;
//	int start_index = 6;
//
//	Array<string> val_len(10, 5);
//
//	val_len.setStartIndex(start_index);
//
//	if (val_len.getStartIndex() != start_index)
//		pass = false;
//
//	cout << "Pos start index test complex ";
//
//	return pass;
//}
//
//// Start with index as -6
//bool test_set_neg_start_index_complex()
//{
//	bool pass = true;
//	int start_index = -6;
//
//	Array<string> val_len(10, 5);
//
//	val_len.setStartIndex(start_index);
//
//	if (val_len.getStartIndex() != start_index)
//		pass = false;
//
//	cout << "Neg start index test complex ";
//
//	return pass;
//}
//
//bool test_adding_values_complex()
//{
//	bool pass = true;
//	string temp;
//
//	Array<string> val_len(15); // Create array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	for (int i = 0; i < NUM_NAMES && pass; ++i) // Check it
//	{
//		temp = val_len[i];
//
//		if (temp != NAMES[i])
//			pass = false;
//	}
//
//	cout << "Add values test complex ";
//
//	return pass;
//}
//
//bool test_larger_length_with_data_complex()
//{
//	bool pass = true;
//	string temp;
//
//	int new_length = 20;
//
//	Array<string> val_len(15); // Create the array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	val_len.setLength(new_length);  // Double the length after data was assigned
//
//	// First 15 should match
//	for (int i = 0; i < NUM_NAMES && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp != NAMES[i])
//			pass = false;
//	}
//
//	// Last 5 should be empty strings
//	for (int i = 15; i < new_length && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp != "")
//			pass = false;
//	}
//
//	cout << "Change larger length with data test complex ";
//
//	return pass;
//}
//
//bool test_smaller_length_with_data_complex()
//{
//	bool pass = true;
//	string temp;
//	int new_length = 8;
//
//	Array<string> val_len(15); // Create the array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	val_len.setLength(new_length);
//
//	// First 8 should match
//	for (int i = 0; i < new_length && pass; ++i)
//	{
//		temp = val_len[i];
//
//		if (temp != NAMES[i])
//			pass = false;
//	}
//
//	cout << "Change smaller length with data test complex ";
//
//	return pass;
//}
//
//bool test_set_start_index_with_data_complex()
//{
//	bool pass = true;
//	string temp;
//	int new_start_index = 8;
//
//	Array<string> val_len(15); // Create the array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	val_len.setStartIndex(new_start_index);
//
//	// Check data integrity
//	for (int i = 0; i < NUM_NAMES && pass; ++i)
//	{
//		try // to access the array
//		{
//			temp = val_len[i + new_start_index];
//			if (temp != NAMES[i])
//				pass = false;
//		}
//		catch (Exception& exception)
//		{
//			pass = true;
//		}
//	}
//
//	cout << "Set start index with data test complex ";
//
//	return pass;
//}
//
//bool test_copy_ctor_complex()
//{
//	bool pass = true;
//
//	Array<string> val_len(15); // Create the array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	Array<string> val_len_cpy(val_len);
//
//	// Check data integrity
//	for (int i = 0; i < NUM_NAMES && pass; ++i)
//	{
//		if (val_len_cpy[i] != NAMES[i])
//			pass = false;
//	}
//
//	cout << "Copy ctor test complex ";
//
//	return pass;
//}
//
//Array<string> create_string_Array()
//{
//	Array<string> val_len(15); // Create an array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	return val_len; // Send it back
//}
//
//bool test_move_ctor_complex()
//{
//	bool pass = true;
//
//	Array<string> val_len(15); // Create an array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	Array<string> val_len_cpy(create_string_Array());
//
//	// Check data integrity
//	for (int i = 0; i < NUM_NAMES && pass; ++i)
//	{
//		if (val_len_cpy[i] != val_len[i])
//			pass = false;
//	}
//
//	cout << "Move ctor complex test ";
//
//	return pass;
//}
//
//bool test_op_eql_complex()
//{
//	bool pass = true;
//
//	Array<string> val_len(15); // Create an array
//
//	for (int i = 0; i < NUM_NAMES; ++i) // Fill it
//		val_len[i] = NAMES[i];
//
//	Array<string> val_len_cpy;
//
//	val_len_cpy = val_len;
//
//	// Check data integrity
//	for (int i = 0; i < NUM_NAMES && pass; ++i)
//	{
//		if (val_len_cpy[i] != NAMES[i])
//			pass = false;
//	}
//
//	cout << "Op equal test complex ";
//
//	return pass;
//}
