//Circular Queue class for Lab 4 CST 211 by Cari Blaker

#pragma once
#include "Array.h"
#include "Exception.h"

template <typename U>
class Queue {
private:
	Array <U> m_queue;
	int m_size;									//this will be the current size of the Queue. The array class will keep track of the limit.
	int front, back;							//these will keep track of the front and back of our circle

public:
	Queue() : m_size{ 0 }, m_queue{ 10, 0 }, front{ -1 }, back{ -1 } { }		//default constructor creates an array of length 10, starting index 0
			
	Queue(const Queue& copy)					//copy constructor
	{
		m_size = copy.m_size;
		m_queue = copy.m_queue;
		front = copy.front;
		back = copy.back;
	}

	Queue(Queue&& move) noexcept				//move constructor
	{
		*this = move;
	}

	~Queue() { }								//destructor

	Queue& operator=(const Queue& copy)			//copy assignment operator
	{
		m_size = copy.m_size;
		m_queue = copy.m_queue;
		return *this;
	}

	Queue& operator=(Queue&& move) noexcept		//move assignment operator
	{
		*this = move;
		return *this;
	}

	void Enqueue(const U data)
	{
		if (isFull())
			throw Exception("Error: Queue is full");
		if (isEmpty())
		{
			front = 0;
			back = 0;
			m_queue[back] = data;
		}
		else
		{
			back = ( (back + 1) % m_queue.m_length);
			m_queue[back] = data;
		}
		m_size++;
	}

	U Dequeue()
	{
		if (isEmpty())
			throw Exception("Error: The queue is empty");

		U element = m_queue[front];
		m_queue[front] == NULL;						//if the queue is full of pointers this will break everything I imagine
		m_size--;

		if (front < m_queue.m_length)				//if we're still within the circle...
			front++;								//push the front out to accomodate the dequeue
		else
			front = 0;								//if we need to loop back around in the circle, put the front at 0 again

		if (isEmpty())
		{
			front = -1;
			back = front;
		}
		return element;
	}

	U Peek() const
	{
		return m_queue[front];
	}

	int getSize() const
	{
		return m_size;
	}

	bool isEmpty() const
	{
		bool empty = false;
		if (m_size == 0)
			empty = true;

		return empty;
	}

	bool isFull() const
	{
		bool full = false;
		if (m_size >= m_queue.m_length)
			full = true;

		return full;
	}

	void Print()
	{
		if (isEmpty())
			throw Exception("Error: could not print, list is empty");
		for (int i = front; i != back; ((i + 1) % m_queue.getLength()))
			cout << m_queue.m_array[i] << endl;
	}



};